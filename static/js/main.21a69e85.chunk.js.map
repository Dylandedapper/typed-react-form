{"version":3,"sources":["../../src/FormState.tsx","VisualRender.tsx","App.tsx","index.tsx"],"names":["keys","Array","obj","Object","Error","memberCopy","value","ListenEmitter","counter","listen","this","listeners","setters","id","listenAny","anyListeners","ignoreAny","ignore","console","fireMultiple","updateAllWasUsed","i","fire","l","ObjectListener","update","_values","key","updateAll","changed","objectCompareMode","a","aKeys","bKeys","largest","o","k","av","bv","b","changedKeys","Form","validateOnChange","formId","setState","setStateField","resetAll","reset","defaultValues","setErrors","setError","error","validateAll","allErrors","validator","validate","recalculateDirty","ak","bk","lk","d","dirtyListener","e","values","setValues","valuesListener","setDefaultValues","defaultValuesListener","setValue","isDefault","setValueInternal","dirty","errorListener","stateListener","useListener","form","onlyOnUpdateAll","setRender","useState","useEffect","a1","a2","a3","a4","a5","defaultValue","state","useAnyListener","useChildForm","parentForm","c","useRef","p1","p2","p3","p4","p5","useArrayForm","parent","name","remove","newValues","move","to","newArr","target","increment","swap","index","newIndex","clear","append","props","React","arr","VisualRender","ref","timeoutRef","current","className","clearTimeout","window","setTimeout","children","Input","rest","disabled","isSubmitting","placeholder","style","background","padding","fontSize","outline","onChange","ev","fontWeight","color","App","author","todos","fill","map","_","message","priority","useForm","validateTodoList","onSubmit","preventDefault","Promise","res","margin","href","TodoItem","onMoveTop","onRemove","type","onClick","Date","getTime","FormValues","border","JSON","stringify","todoErrors","reduce","prev","val","length","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21a69e85.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nexport type ObjectOrArray = {\n    [Key in number | string]: any;\n};\n\nexport type KeyOf<T extends ObjectOrArray> = T extends any[] ? number : keyof T;\n\nexport type ListenerCallback = (updateAllWasUsed: boolean) => void;\nexport type ListenerMap = { [T in string]?: ListenerCallback };\n\ntype DirtyType<T> = T extends ObjectOrArray ? DirtyMap<T> | false : boolean;\ntype DirtyMap<T extends ObjectOrArray> = {\n    [Key in KeyOf<T>]?: DirtyType<T[Key]>;\n};\n\ntype ErrorType<T, Error> = T extends ObjectOrArray ? ErrorMap<T, Error> : Error;\ntype ErrorMap<T extends ObjectOrArray, Error> = {\n    [Key in KeyOf<T>]?: ErrorType<T[Key], Error>;\n};\n\nexport type Validator<T, Error> = (values: T) => ErrorMap<T, Error>;\n\nfunction keys<T>(obj: T): KeyOf<T>[] {\n    if (Array.isArray(obj)) {\n        return Array.from(Array(obj.length).keys()) as any;\n    } else if (typeof obj === \"object\") {\n        return Object.keys(obj) as any;\n    } else {\n        throw new Error(\"Can only keys() arrays and objects.\");\n    }\n}\n\nfunction memberCopy<T>(value: T): T {\n    if (Array.isArray(value)) {\n        return [...value] as any;\n    } else if (typeof value === \"object\") {\n        return { ...value };\n    } else {\n        throw new Error(\"Can only memberCopy() arrays and objects.\");\n    }\n}\n\nfunction changedKeys<T>(\n    a: T,\n    b: T,\n    objectCompareMode: \"skip\" | \"truthy\" | \"compare\" = \"truthy\"\n): KeyOf<T>[] {\n    if (a === b) return [];\n    let aKeys = keys(a);\n    let bKeys = keys(b);\n    let largest = aKeys.length > bKeys.length ? aKeys : bKeys;\n    let changed = [];\n    const o = {};\n    for (let i = 0; i < largest.length; i++) {\n        let k = largest[i];\n        let av = a[k as any];\n        let bv = b[k as any];\n        if (typeof av === \"object\" || typeof bv === \"object\") {\n            if (objectCompareMode === \"truthy\") {\n                if (typeof av === \"object\") av = av ? o : undefined;\n                if (typeof bv === \"object\") bv = bv ? o : undefined;\n            } else if (objectCompareMode === \"skip\") {\n                continue;\n            }\n        }\n        if (av !== bv) {\n            changed.push(k);\n        }\n    }\n    return changed;\n}\n\nexport const DIRTY_KEY_COUNT_SYMBOL = \"_keyCount\";\n\nexport class ListenEmitter<Key extends string | number | symbol> {\n    private listeners?: { [T in Key]?: ListenerMap };\n    private anyListeners?: ListenerMap;\n    private counter = 0;\n\n    /**\n     * Invokes a callback when a specified field changes.\n     * @param key The field to listen to.\n     * @param listener The callback to invoke when the field changes.\n     * @returns An id to pass to `ignore()` when you don't want to listen to the field anymore.\n     */\n    public listen(key: Key, listener: ListenerCallback): string {\n        if (!this.listeners) this.listeners = {};\n        let setters = this.listeners[key];\n        if (!setters) {\n            setters = {};\n            this.listeners[key] = setters;\n        }\n        let id = \"\" + this.counter++;\n        setters[id] = listener;\n        return id;\n    }\n\n    /**\n     * Invokes a callback when any field on this form has changed.\n     * @param listener The callback to invoke.\n     */\n    public listenAny(listener: ListenerCallback) {\n        if (!this.anyListeners) this.anyListeners = {};\n        let id = \"\" + this.counter++;\n        this.anyListeners[id] = listener;\n        return id;\n    }\n\n    public ignoreAny(id: string) {\n        if (!this.anyListeners) return;\n        delete this.anyListeners[id];\n    }\n\n    public ignore(key: Key, id: string) {\n        if (!this.listeners) return;\n        let setters = this.listeners[key];\n        if (!setters) {\n            console.warn(\"Ignore was called for no reason\", key, id);\n            return;\n        }\n        delete setters[id];\n    }\n\n    public fireMultiple(keys: Key[], updateAllWasUsed: boolean = false) {\n        for (let i = 0; i < keys.length; i++)\n            this.fire(keys[i], updateAllWasUsed);\n    }\n\n    public fire(key: Key, updateAllWasUsed: boolean = false) {\n        if (this.listeners) {\n            let l = this.listeners[key];\n            if (l) {\n                Object.keys(l!).forEach((e) => l![e]!(updateAllWasUsed));\n            }\n        }\n        if (this.anyListeners) {\n            Object.keys(this.anyListeners).forEach((e) =>\n                this.anyListeners![e]!(updateAllWasUsed)\n            );\n        }\n    }\n}\n\nexport class ObjectListener<T extends ObjectOrArray> extends ListenEmitter<\n    KeyOf<T>\n> {\n    private _values: T;\n\n    public get values() {\n        return this._values;\n    }\n\n    public constructor(initialValues: T) {\n        super();\n        this._values = memberCopy(initialValues);\n    }\n\n    public update(key: KeyOf<T>, value: T[KeyOf<T>] | undefined) {\n        if (\n            typeof this._values[key] !== \"object\" &&\n            this._values[key] === value\n        )\n            return false;\n        if (value === undefined) {\n            if (Array.isArray(this._values)) {\n                this._values.splice(key as number, 1);\n            } else {\n                delete this._values[key];\n            }\n        } else {\n            this._values[key] = value;\n        }\n        super.fire(key, false);\n        return true;\n    }\n\n    public updateAll(values: T) {\n        if (this._values === values) return false;\n        let changed = changedKeys(this._values, values, \"compare\");\n        this._values = memberCopy(values);\n        super.fireMultiple(changed, true);\n        return changed.length > 0;\n    }\n}\n\nexport class Form<\n    T extends ObjectOrArray,\n    State extends ObjectOrArray = {},\n    Error = string\n> {\n    public valuesListener: ObjectListener<T>;\n    public defaultValuesListener: ObjectListener<T>;\n    public dirtyListener: ObjectListener<DirtyMap<T>>;\n    public errorListener: ObjectListener<ErrorMap<T, Error>>;\n    public stateListener: ObjectListener<State>;\n    public validator?: Validator<T, Error>;\n    public validateOnChange: boolean;\n    public formId: number = Form.counter++;\n\n    private static counter = 0;\n\n    public get values() {\n        return this.valuesListener.values;\n    }\n\n    public get defaultValues() {\n        return this.defaultValuesListener.values;\n    }\n\n    public get dirtyMap() {\n        return this.dirtyListener.values;\n    }\n\n    public get errorMap() {\n        return this.errorListener.values;\n    }\n\n    public get dirty() {\n        return Object.keys(this.dirtyListener.values).some(\n            (e) => this.dirtyListener.values[e]\n        );\n    }\n\n    public get error() {\n        return Object.keys(this.errorListener.values).some(\n            (e) => this.errorListener.values[e]\n        );\n    }\n\n    public get state() {\n        return this.stateListener.values;\n    }\n\n    constructor(\n        values: T,\n        defaultValues: T,\n        state: State,\n        validator?: Validator<T, Error>,\n        validateOnChange: boolean = true\n    ) {\n        this.validator = validator;\n        this.validateOnChange = validateOnChange;\n        this.valuesListener = new ObjectListener(values);\n        this.defaultValuesListener = new ObjectListener(defaultValues);\n        this.stateListener = new ObjectListener(state);\n        this.dirtyListener = new ObjectListener({});\n        this.errorListener = new ObjectListener({});\n    }\n\n    public setState(newState: State) {\n        this.stateListener.updateAll(newState);\n    }\n\n    public setStateField<Key extends KeyOf<State>>(\n        key: Key,\n        value: State[Key]\n    ) {\n        this.stateListener.update(key, value);\n    }\n\n    public resetAll() {\n        this.setValues(this.defaultValues);\n    }\n\n    public reset(key: KeyOf<T>) {\n        this.setValueInternal(key, this.defaultValues[key], false as any);\n    }\n\n    public setErrors(errors: ErrorMap<T, Error>) {\n        this.errorListener.updateAll(errors);\n    }\n\n    public setError<Key extends KeyOf<T>>(\n        key: Key,\n        error: ErrorType<T[Key], Error> | null | undefined\n    ) {\n        this.errorListener.update(key as any, (error as any) ?? undefined);\n    }\n\n    public validateAll() {\n        if (!this.validator) {\n            console.warn(\n                \"validateAll() was called on a form which does not have a validator set\"\n            );\n            return;\n        }\n        let allErrors = this.validator(this.values);\n        this.errorListener.updateAll(allErrors as any);\n    }\n\n    public validate(key: KeyOf<T>) {\n        if (!this.validator) {\n            console.warn(\n                \"validate() was called on a form which does not have a validator set\"\n            );\n            return;\n        }\n        // TODO: validation per field\n        let allErrors = this.validator(this.values);\n        this.errorListener.update(key as any, allErrors[key] as any);\n    }\n\n    public recalculateDirty() {\n        let ak = Object.keys(this.values);\n        let bk = Object.keys(this.defaultValues);\n        let lk = ak.length > bk.length ? ak : bk;\n        let d = { ...this.dirtyListener.values };\n        for (let i = 0; i < lk.length; i++) {\n            let e = lk[i];\n            let a = this.values[e];\n            let b = this.defaultValues[e];\n            if (typeof a === \"object\" || typeof b === \"object\") continue; // Do not compare objects\n            if (a !== b) d[e] = true;\n            else delete d[e];\n        }\n        if (ak.length !== bk.length) d[DIRTY_KEY_COUNT_SYMBOL] = true;\n        else delete d[DIRTY_KEY_COUNT_SYMBOL];\n        this.dirtyListener.updateAll(d);\n    }\n\n    public setValues(values: T, validate: boolean = true) {\n        if (!values) return;\n        if (this.valuesListener.updateAll(values)) {\n            this.recalculateDirty();\n            if (validate && this.validator) this.validateAll();\n        }\n    }\n\n    public setDefaultValues(defaultValues: T, validate: boolean = true) {\n        if (this.defaultValuesListener.updateAll(defaultValues)) {\n            this.recalculateDirty();\n            if (validate && this.validator) this.validateAll();\n        }\n    }\n\n    public setValue<Key extends KeyOf<T>>(\n        key: Key,\n        value: T[Key],\n        isDefault: boolean = false\n    ) {\n        if (typeof value === \"object\" || Array.isArray(value)) {\n            console.warn(\n                \"Not setting value, value is object, use setValueInternal\"\n            );\n            return;\n        }\n        this.setValueInternal(\n            key,\n            value,\n            (this.defaultValuesListener.values[key] !== value) as any,\n            isDefault\n        );\n    }\n\n    public setValueInternal<Key extends KeyOf<T>>(\n        key: Key,\n        value: T[Key],\n        dirty?: DirtyType<T[Key]>,\n        isDefault: boolean = false\n    ) {\n        let changed = isDefault\n            ? this.defaultValuesListener.update(key, value)\n            : this.valuesListener.update(key, value);\n        if (changed) {\n            if (dirty !== undefined)\n                this.dirtyListener.update(key as any, dirty as any);\n            if (this.validator && this.validateOnChange) this.validateAll(); // use this.validate instead?\n        }\n    }\n}\n\nexport function useForm<\n    T extends ObjectOrArray,\n    State extends ObjectOrArray = {},\n    Error = string\n>(\n    defaultValues: T,\n    state: State,\n    validator?: Validator<T, Error>,\n    validateOnChange: boolean = true\n) {\n    let c = useRef<Form<T, State, Error> | null>(null);\n\n    if (c.current === null) {\n        c.current = new Form<T, State, Error>(\n            defaultValues,\n            defaultValues,\n            state,\n            validator,\n            validateOnChange\n        );\n    }\n\n    useEffect(() => {\n        c.current!.setDefaultValues(defaultValues);\n    }, [defaultValues]);\n\n    return c.current;\n}\n\nexport function useListener<\n    T extends ObjectOrArray,\n    State extends ObjectOrArray,\n    Error,\n    Key extends KeyOf<T>\n>(form: Form<T, State, Error>, key: Key, onlyOnUpdateAll: boolean = false) {\n    const [, setRender] = useState(0);\n\n    useEffect(() => {\n        function causeRerender(updateAllWasUsed: boolean) {\n            if (!onlyOnUpdateAll || updateAllWasUsed) setRender((e) => e + 1);\n        }\n        let a1 = form.valuesListener.listen(key, causeRerender);\n        let a2 = form.defaultValuesListener.listen(key, causeRerender);\n        let a3 = form.dirtyListener.listen(key as any, causeRerender);\n        let a4 = form.errorListener.listen(key as any, causeRerender);\n        let a5 = form.stateListener.listenAny(causeRerender);\n        return () => {\n            form.valuesListener.ignore(key, a1);\n            form.defaultValuesListener.ignore(key, a2);\n            form.dirtyListener.ignore(key as any, a3);\n            form.errorListener.ignore(key as any, a4);\n            form.stateListener.ignoreAny(a5);\n        };\n    }, [form, key]);\n\n    return {\n        value: form.values[key],\n        defaultValue: form.defaultValues[key],\n        dirty: form.dirtyMap[key],\n        error: form.errorMap[key],\n        state: form.state,\n        form: form,\n        setValue: (value: T[Key]) => form.setValue(key, value)\n    };\n}\n\nexport function useAnyListener<\n    T extends ObjectOrArray,\n    State extends ObjectOrArray,\n    Error\n>(form: Form<T, State, Error>, onlyOnUpdateAll: boolean = false) {\n    const [, setRender] = useState(0);\n\n    useEffect(() => {\n        function causeRerender(updateAllWasUsed: boolean) {\n            if (!onlyOnUpdateAll || updateAllWasUsed) setRender((e) => e + 1);\n        }\n        let a1 = form.valuesListener.listenAny(causeRerender);\n        let a2 = form.defaultValuesListener.listenAny(causeRerender);\n        let a3 = form.dirtyListener.listenAny(causeRerender);\n        let a4 = form.errorListener.listenAny(causeRerender);\n        let a5 = form.stateListener.listenAny(causeRerender);\n        return () => {\n            form.valuesListener.ignoreAny(a1);\n            form.defaultValuesListener.ignoreAny(a2);\n            form.dirtyListener.ignoreAny(a3);\n            form.errorListener.ignoreAny(a4);\n            form.stateListener.ignoreAny(a5);\n        };\n    }, [form]);\n\n    return form;\n}\n\nexport function useChildForm<\n    Parent extends ObjectOrArray,\n    ParentState extends ObjectOrArray,\n    ParentError,\n    Key extends KeyOf<Parent>\n>(parentForm: Form<Parent, ParentState, ParentError>, key: Key) {\n    let c = useRef<Form<Parent[Key], ParentState, ParentError> | null>(null);\n\n    if (c.current === null) {\n        c.current = new Form<Parent[Key], ParentState, ParentError>(\n            parentForm.values[key], //?? ({} as any),\n            parentForm.defaultValues[key] ?? ({} as any),\n            parentForm.state\n        );\n    }\n\n    useEffect(() => {\n        // Listen for parent value changes on this child form\n        let p1 = parentForm.valuesListener.listen(key, () => {\n            c.current!.setValues(parentForm.values[key]);\n        });\n        let p2 = parentForm.defaultValuesListener.listen(key, () => {\n            c.current!.setDefaultValues(\n                parentForm.defaultValuesListener.values[key]\n            );\n        });\n        let p3 = parentForm.dirtyListener.listen(key as any, () => {\n            c.current!.dirtyListener.updateAll(\n                parentForm.dirtyListener.values[key] || ({} as any)\n            );\n        });\n        let p4 = parentForm.errorListener.listen(key as any, () => {\n            c.current!.errorListener.updateAll(\n                parentForm.errorListener.values[key] || ({} as any)\n            );\n        });\n        let p5 = parentForm.stateListener.listenAny(() => {\n            c.current!.stateListener.updateAll(parentForm.stateListener.values);\n        });\n\n        // Listen for any change on this form and notify parent on change\n        let a1 = c.current!.valuesListener.listenAny(() => {\n            parentForm.setValueInternal(\n                key,\n                c.current!.valuesListener.values,\n                undefined,\n                false\n            );\n        });\n        let a2 = c.current!.defaultValuesListener.listenAny(() => {\n            // Only update parent defaults for this field when a non default {} is set (can happen when a new array item is added)\n            if (\n                Object.keys(c.current!.defaultValuesListener.values).length > 0\n            ) {\n                parentForm.setValueInternal(\n                    key,\n                    c.current!.defaultValuesListener.values,\n                    undefined,\n                    true\n                );\n            }\n        });\n        let a3 = c.current!.dirtyListener.listenAny(() => {\n            parentForm.dirtyListener.update(\n                key as any,\n                c.current!.dirty\n                    ? (c.current!.dirtyListener.values as any)\n                    : undefined\n            );\n        });\n        let a4 = c.current!.errorListener.listenAny(() => {\n            parentForm.errorListener.update(\n                key as any,\n                c.current!.error\n                    ? (c.current!.errorListener.values as any)\n                    : undefined\n            );\n        });\n\n        c.current!.valuesListener.updateAll(parentForm.values[key]);\n        c.current!.defaultValuesListener.updateAll(\n            parentForm.defaultValues[key] ?? ({} as any)\n        );\n        c.current!.recalculateDirty();\n        if (c.current!.validator) c.current!.validateAll();\n\n        return () => {\n            parentForm.valuesListener.ignore(key, p1);\n            parentForm.defaultValuesListener.ignore(key, p2);\n            parentForm.dirtyListener.ignore(key as any, p3);\n            parentForm.errorListener.ignore(key as any, p4);\n            parentForm.stateListener.ignoreAny(p5);\n            c.current!.valuesListener.ignoreAny(a1);\n            c.current!.defaultValuesListener.ignoreAny(a2);\n            c.current!.dirtyListener.ignoreAny(a3);\n            c.current!.errorListener.ignoreAny(a4);\n        };\n    }, [parentForm, key]);\n\n    useEffect(() => {\n        return () => {\n            // Do not set value to null on parentForm, because this child (and should be) unmounted because the parent value was set to null\n            parentForm.dirtyListener.update(key as any, undefined);\n            parentForm.errorListener.update(key as any, undefined);\n        };\n    }, []);\n\n    return c.current;\n}\n\nexport function useArrayForm<\n    Parent extends ObjectOrArray,\n    ParentState extends ObjectOrArray,\n    ParentError,\n    Key extends KeyOf<Parent>\n>(parent: Form<Parent, ParentState, ParentError>, name: Key) {\n    const form = useChildForm<Parent, ParentState, ParentError, Key>(\n        parent,\n        name\n    );\n    const [, setRender] = useState(0);\n\n    useEffect(() => {\n        let p1 = form.valuesListener.listenAny((all) => {\n            if (all) {\n                setRender((e) => e + 1);\n            }\n        });\n        return () => {\n            form.valuesListener.ignoreAny(p1);\n        };\n    }, [parent, name]);\n\n    function append(value: Parent[Key][number]) {\n        form.setValues([...(form.values as any), value] as any);\n    }\n\n    function remove(index: number) {\n        let newValues = [...(form.values as any)];\n        newValues.splice(index, 1);\n        form.setValues(newValues as any);\n    }\n\n    function clear() {\n        form.setValues([] as any);\n    }\n\n    function move(from: number, to: number) {\n        if (to === from) return;\n        let newArr = [...(form.values as any)];\n        var target = newArr[from];\n        var increment = to < from ? -1 : 1;\n        for (var k = from; k !== to; k += increment) {\n            newArr[k] = newArr[k + increment];\n        }\n        newArr[to] = target;\n        form.setValues(newArr as any);\n    }\n\n    function swap(index: number, newIndex: number) {\n        if (index === newIndex) {\n            return;\n        }\n        let values = [...(form.values as any)];\n        [values[index], values[newIndex]] = [values[newIndex], values[index]];\n        form.setValues(values as any);\n    }\n\n    return {\n        remove,\n        move,\n        swap,\n        clear,\n        append,\n        form\n    };\n}\n\nexport function ArrayForm<\n    Parent extends ObjectOrArray,\n    ParentState extends ObjectOrArray,\n    ParentError,\n    Key extends KeyOf<Parent>\n>(props: {\n    parent: Form<Parent, ParentState, ParentError>;\n    name: Key;\n    children: (props: {\n        form: Form<Parent[Key], ParentState, ParentError>;\n        remove: (index: number) => void;\n        clear: () => void;\n        move: (index: number, newIndex: number) => void;\n        swap: (index: number, newIndex: number) => void;\n        append: (value: Parent[Key][number]) => void;\n    }) => React.ReactNode;\n}) {\n    const arr = useArrayForm(props.parent, props.name);\n    return <React.Fragment>{props.children(arr)}</React.Fragment>;\n}\n\nexport function Listener<\n    T extends ObjectOrArray,\n    State extends ObjectOrArray,\n    Error,\n    Key extends KeyOf<T>\n>(props: {\n    form: Form<T, State, Error>;\n    name: Key;\n    children: (props: {\n        value: T[Key];\n        defaultValue: T[Key];\n        dirty: DirtyMap<T>[Key];\n        error: ErrorMap<T, Error>[Key];\n        state: State;\n        form: Form<T, State, Error>;\n        setValue: (value: T[Key]) => void;\n    }) => React.ReactNode;\n}) {\n    const l = useListener(props.form, props.name);\n    return <React.Fragment>{props.children(l)}</React.Fragment>;\n}\n\nexport function AnyListener<\n    T extends ObjectOrArray,\n    State extends ObjectOrArray,\n    Error\n>(props: {\n    form: Form<T, State, Error>;\n    children: (props: Form<T, State, Error>) => React.ReactNode;\n}) {\n    const l = useAnyListener(props.form);\n    return <React.Fragment>{props.children(l)}</React.Fragment>;\n}\n\nexport function ChildForm<\n    Parent extends ObjectOrArray,\n    ParentState extends ObjectOrArray,\n    ParentError,\n    Key extends KeyOf<Parent>\n>(props: {\n    parent: Form<Parent, ParentState, ParentError>;\n    name: Key;\n    children: (\n        props: Form<Parent[Key], ParentState, ParentError>\n    ) => React.ReactNode;\n}) {\n    const arr = useChildForm(props.parent, props.name);\n    return <React.Fragment>{props.children(arr)}</React.Fragment>;\n}\n","import React, { useRef } from \"react\";\n\nexport function VisualRender(props: { children: React.ReactNode }) {\n    let ref = useRef<HTMLDivElement>(null);\n    let timeoutRef = useRef<number | null>(null);\n\n    if (ref.current) {\n        ref.current.className = \"\";\n        if (timeoutRef.current) clearTimeout(timeoutRef.current);\n        timeoutRef.current = window.setTimeout(() => {\n            ref.current && (ref.current.className = \"blink\");\n        }, 100);\n    }\n\n    return <div ref={ref}>{props.children}</div>;\n}\n","import React, { InputHTMLAttributes, useState } from \"react\";\nimport {\n    AnyListener,\n    ArrayForm,\n    Form,\n    KeyOf,\n    ObjectOrArray,\n    useAnyListener,\n    useChildForm,\n    useForm,\n    useListener\n} from \"typed-react-form\";\nimport { VisualRender } from \"./VisualRender\";\n\ninterface TodoList {\n    name: string;\n    author: string;\n    todos: Todo[];\n}\n\ninterface Todo {\n    id: number;\n    message: string;\n    priority: \"low\" | \"normal\" | \"high\";\n}\n\n/**\n * A custom input that can be reused everywhere when using useForm\n */\nfunction Input<T extends ObjectOrArray>({\n    form,\n    name,\n    ...rest\n}: {\n    form: Form<T, { isSubmitting: boolean }>;\n    name: KeyOf<T>;\n} & Omit<InputHTMLAttributes<HTMLInputElement>, \"name\" | \"form\">) {\n    const { value, dirty, defaultValue, error, state } = useListener(\n        form,\n        name\n    );\n\n    return (\n        <VisualRender>\n            <input\n                disabled={state.isSubmitting}\n                placeholder={defaultValue}\n                style={{\n                    background: dirty ? \"#eee\" : \"#fff\",\n                    padding: \"0.3em\",\n                    fontSize: \"inherit\",\n                    outline: error ? \"4px solid #f306\" : \"none\"\n                }}\n                value={value as string}\n                onChange={(ev) =>\n                    form.setValue(name, ev.target.value as T[KeyOf<T>])\n                }\n                {...rest}\n            />\n            {error && (\n                <span\n                    style={{\n                        padding: \"0.3em\",\n                        fontWeight: \"bold\",\n                        color: \"red\"\n                    }}\n                >\n                    {error}\n                </span>\n            )}\n        </VisualRender>\n    );\n}\n\nexport default function App() {\n    const [values, setValues] = useState<TodoList>({\n        author: \"codestix\",\n        name: \"My todo list\",\n        todos: Array(3)\n            .fill(0)\n            .map((_, i) => ({\n                message: \"Fix this \" + i,\n                priority: \"normal\",\n                id: i\n            }))\n    });\n\n    const form = useForm(\n        values, // <- Default values, can change\n        { isSubmitting: false }, // <- Global form state, which can contain custom fields (e.g. loading)\n        validateTodoList, // <- Validator\n        true // <- Validate on change\n    );\n\n    return (\n        <form\n            onSubmit={async (ev) => {\n                ev.preventDefault();\n\n                form.validateAll(); // Validate manually when validateOnChange is disabled.\n                if (form.error) return; // Do not submit if errors\n\n                form.setStateField(\"isSubmitting\", true); // Set the form state (updates every component listening for state updates)\n\n                await new Promise((res) => setTimeout(res, 1000)); // Fake fetch\n\n                form.setStateField(\"isSubmitting\", false); // Set the form state (updates every component listening for state updates)\n\n                setValues({ ...form.values }); // Set new default values, (form.setDefaultValues is also possible instead of useState/useForm combo!)\n            }}\n            style={{ padding: \"1em\", margin: \"1em\" }}\n        >\n            <VisualRender>\n                <h1>\n                    Form created using{\" \"}\n                    <a href=\"https://github.com/CodeStix/typed-react-form\">\n                        typed-react-form\n                    </a>\n                </h1>\n                <p>\n                    The red flash indicates which parts of the form are being\n                    rerendered.\n                </p>\n                <hr />\n                <h2>Todo list</h2>\n                <p>Name</p>\n                {/* The name field is type checked, try to name it something else that does not exist on interface TodoList */}\n                <Input form={form} name=\"name\" />\n                <p>Author</p>\n                <Input form={form} name=\"author\" />\n                <p>Todo's</p>\n                {/* Use ArrayForm (wrapper around useArrayForm) to create dynamic forms */}\n                <ArrayForm parent={form} name=\"todos\">\n                    {(\n                        { form, swap, remove, append } // <- Make sure to use the newly passed form (otherwise type checking will not work!)\n                    ) => (\n                        <VisualRender>\n                            <ul style={{ padding: \"0\" }}>\n                                {form.values.map((e, i) => (\n                                    <TodoItem\n                                        onMoveTop={() => swap(i, 0)}\n                                        onRemove={() => remove(i)}\n                                        key={e.id}\n                                        parent={form}\n                                        index={i}\n                                    />\n                                ))}\n                            </ul>\n                            <button\n                                style={{ margin: \"0 0 1em 0\" }}\n                                type=\"button\"\n                                onClick={() =>\n                                    append({\n                                        message: \"\",\n                                        priority: \"normal\",\n                                        id: new Date().getTime()\n                                    })\n                                }\n                            >\n                                Add item\n                            </button>\n                        </VisualRender>\n                    )}\n                </ArrayForm>\n                <AnyListener form={form}>\n                    {({ state, dirty }) => (\n                        <>\n                            {/* Disable buttons when form is submitting or when nothing has changed, the AnyListener wrapper is required */}\n                            <button\n                                style={{ fontSize: \"1.3em\" }}\n                                disabled={state.isSubmitting || !dirty}\n                            >\n                                Save\n                            </button>\n                            <button\n                                style={{ fontSize: \"1.3em\" }}\n                                disabled={state.isSubmitting || !dirty}\n                                type=\"button\"\n                                onClick={() => form.resetAll()}\n                            >\n                                Reset\n                            </button>\n                        </>\n                    )}\n                </AnyListener>\n\n                <h3>Output</h3>\n                <FormValues form={form} />\n            </VisualRender>\n        </form>\n    );\n}\n\nfunction TodoItem(props: {\n    parent: Form<Todo[], { isSubmitting: boolean }>;\n    index: number;\n    onMoveTop: () => void;\n    onRemove: () => void;\n}) {\n    // Use a child form, each layer in the object is a seperate form: TodoList (useForm) -> Todo[] (useArrayForm) -> Todo (useChildForm)\n    const form = useChildForm(props.parent, props.index);\n\n    return (\n        <li\n            style={{\n                padding: \"1em\",\n                margin: \"1em\",\n                border: \"1px solid #0003\"\n            }}\n        >\n            <VisualRender>\n                <Input form={form} name=\"message\" />\n                <button type=\"button\" onClick={props.onMoveTop}>\n                    Go to top\n                </button>\n                <button type=\"button\" onClick={props.onRemove}>\n                    Remove\n                </button>\n            </VisualRender>\n        </li>\n    );\n}\n\n/**\n *  Shows a JSON representation of a form\n */\nfunction FormValues<T>(props: { form: Form<T> }) {\n    const form = useAnyListener(props.form);\n    return (\n        <VisualRender>\n            <div style={{ background: \"#0001\" }}>\n                <p>\n                    {/* <em>{val.formId}</em> */}\n                    {form.dirty && (\n                        <strong style={{ color: \"blue\" }}>DIRTY</strong>\n                    )}\n                    {form.error && (\n                        <strong style={{ color: \"red\" }}>ERROR</strong>\n                    )}\n                </p>\n                <pre>{JSON.stringify(form.values, null, 2)}</pre>\n                {/* <pre>{JSON.stringify(val.defaultValues)}</pre> */}\n                {/* <pre>{JSON.stringify(val.errorMap, null, 2)}</pre> */}\n                <pre>{JSON.stringify(form.dirtyListener.values, null, 2)}</pre>\n                {/* <pre>{JSON.stringify(val.state, null, 2)}</pre> */}\n            </div>\n        </VisualRender>\n    );\n}\n\n// You should use a validation library (yup, class-validator) instead of this mess...\nfunction validateTodoList(values: TodoList) {\n    let todoErrors = values.todos.reduce((prev, val, index) => {\n        if (val.message.length < 5) {\n            prev[index] = { message: \"Todo message should be longer!\" };\n        }\n        return prev;\n    }, {});\n    return {\n        author:\n            values.author.length < 3 ? \"Author name is too short.\" : undefined,\n        name: values.name.length < 3 ? \"Title is too short.\" : undefined,\n        todos: Object.keys(todoErrors).length > 0 ? todoErrors : undefined\n    };\n}\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}